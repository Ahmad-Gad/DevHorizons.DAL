namespace DevHorizons.DAL.Interfaces
{
    using System.Collections.Generic;

    public interface IDataTable : ICommandBodyBase
    {
        #region Properties

        /// <summary>
        ///    Gets or sets the target object name in the data source which could be a table or view including the schema name. <c>E.g. [dbo].[Orders]</c>.
        /// </summary>
        /// <Created>
        ///    <Author>Ahmad Gad (ahmad.gad@DevHorizons.com)</Author>
        ///    <DateTime>06/03/2022 02:37 PM</DateTime>
        /// </Created>
        string ObjectName { get; set; }

        /// <summary>
        ///    Gets or sets the returned the identity/autonumber (<c>"SCOPE_IDENTITY()"</c> or "@@Identity") generated by an "Insert" DML command.
        /// </summary>
        /// <Created>
        ///    <Author>Ahmad Gad (ahmad.gad@DevHorizons.com)</Author>
        ///    <DateTime>23/02/2022 06:02 PM</DateTime>
        /// </Created>
        long? Identity { get; set; }

        /// <summary>
        ///    Gets or sets the affected rows count by the "<c>SQL</c>" command execution.
        /// </summary>
        /// <Created>
        ///    <Author>Ahmad Gad (ahmad.gad@DevHorizons.com)</Author>
        ///    <DateTime>23/02/2022 06:02 PM</DateTime>
        /// </Created>
        long? RowsCount { get; set; }
        #endregion Properties

        #region Methods

        bool Insert(ICommand cmd = null);

        bool Update(ICommand cmd = null);


        bool Delete(ICommand cmd = null);

        /// <summary>
        ///    Extracts the list of the parameters from the specified "<c>DAL</c>" data table as type of of <see cref="IDataTable"/>.
        /// </summary>
        /// <param name="commandAction">The command action.</param>
        /// <returns>A <see cref="List{T}"/> of <see cref="IDataField"/>.</returns>
        /// <Created>
        ///    <Author>Ahmad Gad (ahmad.gad@DevHorizons.com)</Author>
        ///    <DateTime>10/02/2020 11:03 PM</DateTime>
        /// </Created>
        List<IParameter> GetParmeters(CommandAction commandAction);

        /// <summary>
        ///    Gets the parsed "<c>SQL</c>" command text based on the specified command action.
        /// </summary>
        /// <param name="parameters">The updated parameters to be combined with the command before being sent to the data sources.</param>
        /// <param name="commandAction">The command action.</param>
        /// <returns>The parsed "<c>SQL</c>" command text based on the specified command action.</returns>
        /// <Created>
        ///    <Author>Ahmad Gad (ahmad.gad@DevHorizons.com)</Author>
        ///    <DateTime>10/02/2020 11:03 PM</DateTime>
        /// </Created>
        string GetCommandText(List<IParameter> parameters, CommandAction commandAction);
        #endregion Methods
    }
}
